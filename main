import os
import pandas as pd
from torchvision.io import read_image
import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import Dataset


class CustomImageDataset(Dataset):
    def __init__(self, data, transform=None):
        self.imgs = data
        self.transform = transform

    def __len__(self):
        return len(self.imgs)

    def __getitem__(self, idx):
        img = self.imgs[idx]
        if isinstance(img, str):
            img = read_image(img_path)
        else:
          image=img
        if self.transform:
            image_aug1 = self.transform(image)
            image_aug2 = self.transform(image)

        return image_aug1, image_aug2
        
data = torchvision.datasets.CIFAR10(root='./data', train=True, download=True)

# simclr DA pipeline
s=1
size=32
color_jitter = transforms.ColorJitter(0.8 * s, 0.8 * s, 0.8 * s, 0.2 * s)
transform = transforms.Compose([transforms.ToPILImage(),
                                  transforms.RandomResizedCrop(size=size),    #crop ma riporta a dimensione originale
                                  transforms.RandomHorizontalFlip(),
                                  transforms.RandomApply([color_jitter], p=0.8),     #distorce i colori con una certa probabilit√†
                                  transforms.RandomGrayscale(p=0.2),
                                  transforms.GaussianBlur(kernel_size=int(0.1 * size)),
                                 transforms.ToTensor()])

# create training set from CustomDataset
trainset = CustomImageDataset(data=data.data,  transform=transform)

from torch.utils.data import DataLoader

dataloader = DataLoader(trainset, batch_size=64, shuffle=True)

import matplotlib.pyplot as plt
from torchvision.utils import make_grid

# Display image and augemented
images, images_aug1, images_aug2  = next(iter(dataloader))
#print(f"Feature batch shape: {train_features.size()}")
#print(f"Labels batch shape: {train_labels.size()}")
img = images[0].squeeze()
img_aug1 = images_aug1[0].squeeze()
img_aug1 = img_aug1.permute(1,2,0)
img_aug2 = images_aug2[0].squeeze()
img_aug2 = img_aug2.permute(1,2,0)

#label = train_labels[0]
plt.imshow(img, cmap="gray")
plt.show()

plt.imshow(img_aug1, cmap="gray")
plt.show()

plt.imshow(img_aug2, cmap="gray")

plt.show()

      
